/*
 * CFG_TO_LL1.hpp
 *
 *  Created on: Jan 25, 2012
 *      Author: petergoodman
 *     Version: $Id$
 */

#ifndef Grail_Plus_CFG_TO_LL1_HPP_
#define Grail_Plus_CFG_TO_LL1_HPP_

#include <vector>

#include "fltl/include/CFG.hpp"

#include "grail/include/cfg/compute_null_set.hpp"
#include "grail/include/cfg/compute_first_set.hpp"
#include "grail/include/cfg/compute_follow_set.hpp"

#include "grail/include/io/CommandLineOptions.hpp"
#include "grail/include/io/fread_cfg.hpp"


namespace grail { namespace cli {

    template <typename AlphaT>
    class CFG_TO_LL1 {
    public:

        static const char * const TOOL_NAME;

        static void declare(io::CommandLineOptions &opt, bool in_help) throw() {
            //io::option_type in(opt.declare("stdin", io::opt::OPTIONAL, io::opt::NO_VAL));
            if(!in_help) {
                opt.declare_min_num_positional(1);
                opt.declare_max_num_positional(1);
            }
        }

        static void help(void) throw() {
            //  "  | |                              |                                             |"
            printf(
                "  %s:\n"
                "    Computes the LL1 parser table for a Context-free Grammar (CFG) and outputs\n"
                "    a C++ program capable of parsing the language generated by the grammar, or\n"
                "    potentially a subset of the language because of first/first and first/follow\n"
                "    conflicts.\n\n"
                "  basic use options for %s:\n"
                "    <file>                         read in a CFG from <file>.\n\n",
                TOOL_NAME, TOOL_NAME
            );
        }

        static int main(io::CommandLineOptions &options) throw() {

            using fltl::CFG;

            // run the tool
            FILE *fp(0);
            io::option_type file(options[0U]);
            const char *file_name(file.value());
            fp = fopen(file_name, "r");

            if(0 == fp) {

                options.error(
                    "Unable to open file containing context-free "
                    "grammar for reading."
                );
                options.note("File specified here:", file);

                return 1;
            }

            CFG<AlphaT> cfg;
            int ret(0);

            if(io::fread(fp, cfg, file_name)) {

                std::vector<bool> nullable;
                std::vector<std::vector<bool> *> first;
                std::vector<std::vector<bool> *> follow;

                grail::cfg::compute_null_set(cfg, nullable);
                grail::cfg::compute_first_set(cfg, nullable, first);
                grail::cfg::compute_follow_set(cfg, first, follow);

            } else {
                ret = 1;
            }

            fclose(fp);

            return ret;
        }
    };

    template <typename AlphaT>
    const char * const CFG_TO_LL1<AlphaT>::TOOL_NAME("cfg-to-ll1");
}}

#endif /* Grail_Plus_CFG_TO_LL1_HPP_ */
