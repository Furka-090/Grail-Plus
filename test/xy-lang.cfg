

program -> sub_program EOF
	sub_program -> statement_list
	sub_program -> ";" sub_program

statement_list -> "{" statement_list "}" statement_list_tail
statement_list -> let_statement statement_list_tail
statement_list -> expression statement_list_tail
statement_list -> return_statement statement_list_tail
	statement_list_tail -> ";" sub_program

return_statement -> "return" return_statement_tail
	return_statement_tail -> expression
	return_statement_tail -> epsilon

let_statement -> "let" let_statement_tail
	let_statement_tail -> VARIABLE_NAME definition_or_declaration
	let_statement_tail -> TYPE_NAME type_definition_or_declaration

		definition_or_declaration -> "::" declaration ":=" definition 
		definition_or_declaration -> ":=" definition

		type_definition_or_declaration -> "::" declaration ":=" type_definition 
		type_definition_or_declaration -> ":=" type_definition

			definition -> function_definition
			definition -> expression

			declaration -> type declaration_type_tail

				declaration_type_tail -> "->" declaration
				declaration_type_tail -> "=>" declaration
				declaration_type_tail -> epsilon
			
			type_definition -> type
			type_definition -> "union" function_params_opt "{" "}"  // TODO
			type_definition -> "record" function_params_opt "{" "}" // TODO
			type_definition -> function_definition

type -> TYPE_NAME type_tail
type -> "(" type ")"

	type_tail -> "->" type
	type_tail -> "+" type
	type_tail -> "*" type

function_definition -> "function" function_params "{" sub_program "}" // TODO

function_params_opt -> function_params
function_params_opt -> epsilon
	function_params -> "(" function_param_list ")"
		function_param_list -> TYPE_NAME function_param_list_tail
		function_param_list -> VARIABLE_NAME function_param_list_tail
			function_param_list_tail -> "," function_param_list
			function_param_list_tail -> ";" function_param_list
			function_param_list_tail -> epsilon
	

// encompass non-expressions and ignore operator predecence
expression -> TYPE_NAME expression_tail
expression -> VARIABLE_NAME expression_tail
expression -> STRING_LITERAL expression_tail
expression -> INTEGER_LITERAL expression_tail
expression -> RATIONAL_LITERAL expression_tail
expression -> "(" expression ")"
expression -> "/" expression
expression -> "-" expression

expression_tail -> "+" expression
expression_tail -> "-" expression
expression_tail -> "*" expression
expression_tail -> "/" expression
expression_tail -> "=" expression
expression_tail -> "/=" expression
expression_tail -> "[" expression "]"
expression_tail -> "{" expression_list "}"

expression_list -> expression expression_list_tail
	expression_list_tail -> "," expression_list_tail_tail
		expression_list_tail_tail -> expression
		expression_list_tail_tail -> epsilon
